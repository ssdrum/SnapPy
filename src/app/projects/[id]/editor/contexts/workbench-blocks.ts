import { v4 as uuidv4 } from 'uuid';
import {
  Block,
  BlockState,
  BlockType,
  BooleanValue,
  ComparisonOperator,
  MathOperator,
} from '../blocks/types';

// Add workbench blocks here
const workbenchBlocks: Block[] = [
  {
    id: uuidv4(),
    type: BlockType.Variable,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    selected: 'x',
    parentId: null,
    prevId: null,
    nextId: null,
    children: {
      expression: [],
    },
  },
  {
    id: uuidv4(),
    type: BlockType.While,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    children: {
      condition: [],
      body: [],
    },
  },
  {
    id: uuidv4(),
    type: BlockType.Number,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    value: '',
    children: null,
  },
  {
    id: uuidv4(),
    type: BlockType.Boolean,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    value: BooleanValue.True,
    children: null,
  },
  {
    id: uuidv4(),
    type: BlockType.Math,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    operator: MathOperator.Addition,
    children: {
      left: [],
      right: [],
    },
  },
  {
    id: uuidv4(),
    type: BlockType.Math,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    operator: MathOperator.Subtraction,
    children: {
      left: [],
      right: [],
    },
  },
  {
    id: uuidv4(),
    type: BlockType.Math,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    operator: MathOperator.Multiplication,
    children: {
      left: [],
      right: [],
    },
  },
  {
    id: uuidv4(),
    type: BlockType.Math,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    operator: MathOperator.Division,
    children: {
      left: [],
      right: [],
    },
  },
  {
    id: uuidv4(),
    type: BlockType.Comparison,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    operator: ComparisonOperator.Equal,
    children: {
      left: [],
      right: [],
    },
  },
  {
    id: uuidv4(),
    type: BlockType.Comparison,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    operator: ComparisonOperator.NotEqual,
    children: {
      left: [],
      right: [],
    },
  },
  {
    id: uuidv4(),
    type: BlockType.Comparison,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    operator: ComparisonOperator.GreaterThan,
    children: {
      left: [],
      right: [],
    },
  },
  {
    id: uuidv4(),
    type: BlockType.Comparison,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    operator: ComparisonOperator.LessThan,
    children: {
      left: [],
      right: [],
    },
  },
  {
    id: uuidv4(),
    type: BlockType.Comparison,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    operator: ComparisonOperator.GreaterThanOrEqual,
    children: {
      left: [],
      right: [],
    },
  },
  {
    id: uuidv4(),
    type: BlockType.Comparison,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    operator: ComparisonOperator.LessThanOrEqual,
    children: {
      left: [],
      right: [],
    },
  },
];

export default workbenchBlocks;
