import { v4 as uuidv4 } from 'uuid';
import {
  Block,
  BlockState,
  BlockType,
  BooleanValue,
  ComparisonOperator,
  LogicalOperator,
  MathOperator,
} from '../blocks/types';

const workbenchBlocks: Block[] = [
  // Variables
  {
    id: uuidv4(),
    type: BlockType.Variable,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    selected: 'x',
    parentId: null,
    prevId: null,
    nextId: null,
    children: {
      expression: [],
    },
  },
  {
    id: uuidv4(),
    type: BlockType.VariableValue,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    selected: 'x',
    parentId: null,
    prevId: null,
    nextId: null,
    children: null,
  },

  // Conditionals
  {
    id: uuidv4(),
    type: BlockType.If,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    children: {
      condition: [],
      body: [],
    },
  },
  {
    id: uuidv4(),
    type: BlockType.IfElse,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    children: {
      condition: [],
      ifBody: [],
      elseBody: [],
    },
  },

  // Loops
  {
    id: uuidv4(),
    type: BlockType.For,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    children: {
      expression: [],
      body: [],
    },
  },
  {
    id: uuidv4(),
    type: BlockType.While,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    children: {
      condition: [],
      body: [],
    },
  },

  // Values
  {
    id: uuidv4(),
    type: BlockType.Number,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    value: '',
    children: null,
  },
  {
    id: uuidv4(),
    type: BlockType.String,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    value: '',
    children: null,
  },
  {
    id: uuidv4(),
    type: BlockType.Boolean,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    value: BooleanValue.True,
    children: null,
  },

  // Maths
  {
    id: uuidv4(),
    type: BlockType.Math,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    operator: MathOperator.Addition,
    children: {
      left: [],
      right: [],
    },
  },
  {
    id: uuidv4(),
    type: BlockType.Math,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    operator: MathOperator.Subtraction,
    children: {
      left: [],
      right: [],
    },
  },
  {
    id: uuidv4(),
    type: BlockType.Math,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    operator: MathOperator.Multiplication,
    children: {
      left: [],
      right: [],
    },
  },
  {
    id: uuidv4(),
    type: BlockType.Math,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    operator: MathOperator.Division,
    children: {
      left: [],
      right: [],
    },
  },
  {
    id: uuidv4(),
    type: BlockType.Math,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    operator: MathOperator.Modulo,
    children: {
      left: [],
      right: [],
    },
  },

  // Comparisons
  {
    id: uuidv4(),
    type: BlockType.Comparison,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    operator: ComparisonOperator.Equal,
    children: {
      left: [],
      right: [],
    },
  },
  {
    id: uuidv4(),
    type: BlockType.Comparison,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    operator: ComparisonOperator.NotEqual,
    children: {
      left: [],
      right: [],
    },
  },
  {
    id: uuidv4(),
    type: BlockType.Comparison,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    operator: ComparisonOperator.GreaterThan,
    children: {
      left: [],
      right: [],
    },
  },
  {
    id: uuidv4(),
    type: BlockType.Comparison,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    operator: ComparisonOperator.LessThan,
    children: {
      left: [],
      right: [],
    },
  },
  {
    id: uuidv4(),
    type: BlockType.Comparison,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    operator: ComparisonOperator.GreaterThanOrEqual,
    children: {
      left: [],
      right: [],
    },
  },
  {
    id: uuidv4(),
    type: BlockType.Comparison,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    operator: ComparisonOperator.LessThanOrEqual,
    children: {
      left: [],
      right: [],
    },
  },

  // Logic
  {
    id: uuidv4(),
    type: BlockType.Logical,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    operator: LogicalOperator.And,
    children: {
      left: [],
      right: [],
    },
  },
  {
    id: uuidv4(),
    type: BlockType.Logical,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    operator: LogicalOperator.Or,
    children: {
      left: [],
      right: [],
    },
  },
  {
    id: uuidv4(),
    type: BlockType.Logical,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    operator: LogicalOperator.Not,
    children: {
      operand: [],
    },
  },

  // Output
  {
    id: uuidv4(),
    type: BlockType.Print,
    coords: { x: 0, y: 0 },
    isWorkbenchBlock: true,
    state: BlockState.Idle,
    parentId: null,
    prevId: null,
    nextId: null,
    children: {
      expression: [],
    },
  },
];

// This is a simple way to have categories in the workbench. Make sure the indeces
// are correct
export const blockCategories = {
  Variables: [0, 1],
  Conditionals: [2, 3],
  Loops: [4, 5],
  Values: [6, 7, 8],
  Maths: [9, 10, 11, 12, 13],
  Comparisons: [14, 15, 16, 17, 18, 19],
  Logic: [20, 21, 22],
  Output: [23],
};

export default workbenchBlocks;
